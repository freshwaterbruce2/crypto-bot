name: Security & Compliance Automation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Bandit Security Scanner
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json -ll

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/django
            p/flask
            p/owasp-top-ten
            p/cryptocurrency

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json

      - name: Upload SAST results
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            bandit-report.json
            safety-report.json

  secrets-scanning:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline
          detect-secrets audit .secrets.baseline

  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Run pip-audit
        run: |
          pip install pip-audit
          pip-audit --desc --format json --output pip-audit-report.json

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'crypto-trading-bot'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            snyk-report.json
            pip-audit-report.json
            reports/

  container-scanning:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t crypto-bot:scan .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'crypto-bot:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Run Grype scan
        uses: anchore/scan-action@v3
        with:
          image: 'crypto-bot:scan'
          fail-build: true
          severity-cutoff: high

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /var/lib:/var/lib \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v /etc:/etc --label docker_bench_security \
            docker/docker-bench-security

  infrastructure-scanning:
    name: Infrastructure as Code Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform,kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: Run Terrascan
        run: |
          docker run --rm -v "$(pwd):/src" \
            tenable/terrascan scan -t aws -f infrastructure/terraform/

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infrastructure/terraform/

  compliance-checks:
    name: Compliance Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: PCI DSS Compliance Check
        run: |
          pip install pci-dss-compliance-checker
          pci-dss-check --config .pci-dss-config.yml --output pci-report.json

      - name: SOC 2 Compliance Check
        run: |
          docker run --rm -v $(pwd):/workspace \
            compliance/soc2-scanner:latest \
            --config /workspace/.soc2-config.yml \
            --output /workspace/soc2-report.json

      - name: GDPR Compliance Check
        run: |
          pip install gdpr-compliance-checker
          gdpr-check --scan-dir src/ --output gdpr-report.json

      - name: Financial Services Compliance
        run: |
          # Check for proper encryption of sensitive data
          grep -r "encrypt\|decrypt\|hash" src/ > encryption-usage.txt
          
          # Verify audit logging
          grep -r "audit_log\|compliance_log" src/ > audit-logging.txt
          
          # Check data retention policies
          python scripts/verify_data_retention.py

      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-reports
          path: |
            pci-report.json
            soc2-report.json
            gdpr-report.json
            encryption-usage.txt
            audit-logging.txt

  license-scanning:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run FOSSA scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      - name: Run license-checker
        run: |
          pip install pip-licenses
          pip-licenses --with-urls --format=json > licenses.json

      - name: Verify license compatibility
        run: |
          python scripts/verify_licenses.py licenses.json

  security-benchmarks:
    name: Security Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run CIS Benchmarks
        run: |
          docker run --rm -v $(pwd):/workspace \
            cisecurity/cis-benchmarks:latest \
            --target python \
            --output /workspace/cis-report.json

      - name: Run NIST Cybersecurity Framework Assessment
        run: |
          python scripts/nist_csf_assessment.py --output nist-report.json

      - name: OWASP Top 10 Verification
        run: |
          python scripts/owasp_top10_check.py --output owasp-report.json

  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: sbom-spdx.json

      - name: Generate CycloneDX SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-py -i requirements.txt -o sbom-cyclonedx.json --format json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom-spdx.json
            sbom-cyclonedx.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, secrets-scanning, dependency-scanning, container-scanning, infrastructure-scanning, compliance-checks]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4

      - name: Generate consolidated security report
        run: |
          python scripts/generate_security_report.py \
            --output security-report.html \
            --format html

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: security-report.html

      - name: Send security alerts
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Security vulnerabilities detected!",
              attachments: [{
                color: 'danger',
                text: 'Critical security issues found in ${{ github.repository }}. Check the security report for details.'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}