name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  PYTHON_VERSION: '3.12'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: crypto-trading-bot
  TERRAFORM_VERSION: '1.7.0'
  HELM_VERSION: '3.14.0'

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Ruff linting
        run: ruff check src/ tests/ --fix

      - name: Run Black formatting
        run: black src/ tests/ --check

      - name: Run mypy type checking
        run: mypy src/ --strict

      - name: Run Bandit security linting
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Upload linting reports
        uses: actions/upload-artifact@v4
        with:
          name: linting-reports
          path: |
            bandit-report.json
            .mypy_cache/

  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=junit.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit.xml
            htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: trading_bot
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: trading_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://trading_bot:${{ secrets.DB_PASSWORD }}@localhost:5432/trading_db
          REDIS_URL: redis://localhost:6379
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY_TEST }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET_TEST }}
        run: |
          pytest tests/integration/ \
            --cov=src \
            --cov-report=xml \
            --junitxml=integration-junit.xml \
            -v

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            integration-junit.xml
            coverage.xml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'crypto-trading-bot'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: reports/

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-trivy-results.sarif'

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run tests/performance/load-test.js \
            --out json=performance-results.json \
            --summary-export=performance-summary.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            performance-results.json
            performance-summary.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, performance-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./infrastructure/terraform/staging
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform/staging
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform/staging
        run: terraform apply -auto-approve tfplan

      - name: Update EKS kubeconfig
        run: |
          aws eks update-kubeconfig --name crypto-bot-staging --region us-east-1

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install crypto-bot ./infrastructure/kubernetes/helm \
            --namespace trading \
            --create-namespace \
            --values ./infrastructure/kubernetes/helm/values-staging.yaml \
            --set image.tag=${{ github.sha }} \
            --wait

      - name: Run smoke tests
        run: |
          kubectl run smoke-test \
            --image=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --rm -i --restart=Never \
            -- python -m pytest tests/smoke/ -v

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./infrastructure/terraform/production
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform/production
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./infrastructure/terraform/production
        run: terraform apply -auto-approve tfplan

      - name: Update EKS kubeconfig
        run: |
          aws eks update-kubeconfig --name crypto-bot-production --region us-east-1

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          helm upgrade --install crypto-bot-green ./infrastructure/kubernetes/helm \
            --namespace trading \
            --values ./infrastructure/kubernetes/helm/values-production.yaml \
            --set image.tag=${{ github.sha }} \
            --set deployment.color=green \
            --wait

          # Run health checks
          kubectl run health-check \
            --image=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --rm -i --restart=Never \
            -- python -m pytest tests/health/ -v

          # Switch traffic to green
          kubectl patch service crypto-bot -n trading \
            -p '{"spec":{"selector":{"deployment":"green"}}}'

          # Wait for traffic switch
          sleep 60

          # Delete blue deployment
          helm delete crypto-bot-blue --namespace trading || true

      - name: Create release notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Deployed to production
            - Docker image: `${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`
            
            ## Deployment Details
            - Environment: Production
            - Kubernetes Cluster: crypto-bot-production
            - Namespace: trading
          draft: false
          prerelease: false

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Update EKS kubeconfig
        run: |
          aws eks update-kubeconfig --name crypto-bot-production --region us-east-1

      - name: Rollback deployment
        run: |
          helm rollback crypto-bot -n trading

      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "Production deployment rolled back",
              attachments: [{
                color: 'danger',
                text: 'Deployment of ${{ github.sha }} to production failed and was rolled back'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Pipeline Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "CI/CD Pipeline Failed - ${{ github.repository }}"
          to: devops@company.com
          from: CI/CD Pipeline
          body: |
            The CI/CD pipeline for ${{ github.repository }} has failed.
            
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Branch: ${{ github.ref }}
            
            Please check the GitHub Actions logs for more details.