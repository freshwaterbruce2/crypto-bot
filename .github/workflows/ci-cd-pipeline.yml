name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.5.7'
  DOCKER_BUILDKIT: 1
  AWS_REGION: us-east-1
  GCP_REGION: us-central1

jobs:
  # Security Scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'repo'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            bandit-report.json

  # Code Quality & Testing
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0
      
      - name: Run pylint
        run: pylint src/ --output-format=json > pylint-report.json || true
      
      - name: Run flake8
        run: flake8 src/ --format=json --output-file=flake8-report.json || true
      
      - name: Run mypy type checking
        run: mypy src/ --json-report mypy-report || true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit & Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/integration/ \
            --maxfail=5 \
            --tb=short
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit/
            htmlcov/

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install locust pytest-benchmark
          pip install -r requirements.txt
      
      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark-results.json
      
      - name: Run load tests
        run: |
          locust -f tests/load/locustfile.py \
            --headless \
            --users 100 \
            --spawn-rate 10 \
            --run-time 60s \
            --html performance-report.html
      
      - name: Analyze performance results
        run: python scripts/analyze_performance.py benchmark-results.json
      
      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            benchmark-results.json
            performance-report.html

  # Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
            ${{ secrets.DOCKER_USERNAME }}/crypto-trading-bot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
      
      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
      
      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ghcr.io/${{ github.repository }}@${{ steps.build.outputs.digest }}

  # Infrastructure Validation
  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check -recursive
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
      
      - name: Validate Kubernetes manifests
        run: |
          curl -sL https://github.com/stackrox/kube-linter/releases/latest/download/kube-linter-linux.tar.gz | tar xz
          ./kube-linter lint infrastructure/kubernetes/
      
      - name: Validate Helm charts
        run: |
          helm lint infrastructure/helm/trading-bot

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, validate-infrastructure]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging.crypto-bot.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name crypto-bot-staging --region ${{ env.AWS_REGION }}
      
      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install crypto-bot infrastructure/helm/trading-bot \
            --namespace staging \
            --create-namespace \
            --values infrastructure/helm/trading-bot/values.staging.yaml \
            --set image.tag=${{ needs.build-docker.outputs.image-tag }} \
            --wait \
            --timeout 10m
      
      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=crypto-bot -n staging --timeout=300s
          python scripts/smoke_tests.py --url https://staging.crypto-bot.example.com
      
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: success
          environment: staging
          environment-url: https://staging.crypto-bot.example.com

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, validate-infrastructure, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: https://crypto-bot.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name crypto-bot-production --region ${{ env.AWS_REGION }}
      
      - name: Create deployment backup
        run: |
          kubectl get all -n production -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml
          aws s3 cp backup-*.yaml s3://crypto-bot-backups/deployments/
      
      - name: Deploy to Production (Blue-Green)
        run: |
          # Deploy to green environment
          helm upgrade --install crypto-bot-green infrastructure/helm/trading-bot \
            --namespace production \
            --values infrastructure/helm/trading-bot/values.production.yaml \
            --set image.tag=${{ needs.build-docker.outputs.image-tag }} \
            --set blueGreen.productionSlot=green \
            --wait \
            --timeout 15m
          
          # Run health checks
          python scripts/health_check.py --url https://green.crypto-bot.example.com
          
          # Switch traffic to green
          kubectl patch service crypto-bot -n production \
            -p '{"spec":{"selector":{"slot":"green"}}}'
          
          # Wait and verify
          sleep 60
          python scripts/verify_deployment.py --url https://crypto-bot.example.com
          
          # Scale down blue deployment
          kubectl scale deployment crypto-bot-blue -n production --replicas=0
      
      - name: Run post-deployment tests
        run: |
          python scripts/integration_tests.py --url https://crypto-bot.example.com --env production
      
      - name: Update monitoring dashboards
        run: |
          python scripts/update_grafana_dashboards.py --env production
      
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed for version ${{ needs.build-docker.outputs.image-tag }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback Mechanism
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'release')
    needs: [deploy-production]
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Rollback to previous version
        run: |
          # Switch traffic back to blue
          kubectl patch service crypto-bot -n production \
            -p '{"spec":{"selector":{"slot":"blue"}}}'
          
          # Scale up blue deployment
          kubectl scale deployment crypto-bot-blue -n production --replicas=3
          
          # Remove failed green deployment
          helm uninstall crypto-bot-green -n production
      
      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'ALERT: Production deployment failed and was rolled back!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}