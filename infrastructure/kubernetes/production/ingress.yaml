# Ingress Configuration with SSL/TLS and Load Balancing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: crypto-trading-ingress
  namespace: crypto-trading
  annotations:
    # AWS Load Balancer Controller Annotations
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: crypto-trading-alb
    
    # SSL/TLS Configuration
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS13-1-2-2021-06
    
    # Security Headers
    alb.ingress.kubernetes.io/actions.ssl-redirect: |
      {
        "Type": "redirect",
        "RedirectConfig": {
          "Protocol": "HTTPS",
          "Port": "443",
          "StatusCode": "HTTP_301"
        }
      }
    alb.ingress.kubernetes.io/actions.response-headers: |
      {
        "Type": "fixed-response",
        "FixedResponseConfig": {
          "StatusCode": "200",
          "Headers": {
            "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload",
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": "DENY",
            "X-XSS-Protection": "1; mode=block",
            "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'",
            "Referrer-Policy": "strict-origin-when-cross-origin"
          }
        }
      }
    
    # Health Check Configuration
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '10'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # Load Balancer Attributes
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      idle_timeout.timeout_seconds=60,
      routing.http2.enabled=true,
      routing.http.drop_invalid_header_fields.enabled=true,
      deletion_protection.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=crypto-trading-alb-logs,
      access_logs.s3.prefix=production
    
    # WAF Integration
    alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:us-east-1:123456789012:regional/webacl/crypto-trading-waf/12345678
    
    # Target Group Attributes
    alb.ingress.kubernetes.io/target-group-attributes: |
      deregistration_delay.timeout_seconds=30,
      stickiness.enabled=true,
      stickiness.lb_cookie.duration_seconds=86400,
      load_balancing.algorithm.type=least_outstanding_requests
    
    # Multi-AZ Configuration
    alb.ingress.kubernetes.io/subnets: subnet-12345,subnet-67890,subnet-abcde
    
    # IP Whitelisting
    alb.ingress.kubernetes.io/security-groups: sg-cryptotrading-alb
    
spec:
  tls:
  - hosts:
    - api.crypto-trading.com
    - api-dr.crypto-trading.com
    secretName: crypto-trading-tls
  
  rules:
  # Production API
  - host: api.crypto-trading.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: crypto-trading-bot
            port:
              number: 80
      
      # WebSocket endpoint
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: crypto-trading-websocket
            port:
              number: 8081
      
      # Admin endpoints with additional authentication
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: crypto-trading-admin
            port:
              number: 8082
      
      # Metrics endpoint (internal only)
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: crypto-trading-bot
            port:
              number: 9090
  
  # Disaster Recovery API
  - host: api-dr.crypto-trading.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: crypto-trading-bot-dr
            port:
              number: 80

---
# Network Load Balancer for Low Latency Trading
apiVersion: v1
kind: Service
metadata:
  name: crypto-trading-nlb
  namespace: crypto-trading
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  selector:
    app: crypto-trading-bot
    tier: backend
  ports:
  - name: trading-api
    port: 443
    targetPort: 8080
    protocol: TCP
  - name: websocket
    port: 8443
    targetPort: 8081
    protocol: TCP

---
# WebSocket Service
apiVersion: v1
kind: Service
metadata:
  name: crypto-trading-websocket
  namespace: crypto-trading
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: websocket
spec:
  type: ClusterIP
  selector:
    app: crypto-trading-bot
    component: websocket
  ports:
  - name: websocket
    port: 8081
    targetPort: 8081
    protocol: TCP

---
# Global Accelerator for Ultra-Low Latency
apiVersion: globalaccelerator.aws.crossplane.io/v1alpha1
kind: Accelerator
metadata:
  name: crypto-trading-accelerator
  namespace: crypto-trading
spec:
  forProvider:
    region: us-east-1
    name: crypto-trading-global
    enabled: true
    ipAddressType: IPV4
    attributes:
    - flowLogsEnabled: true
      flowLogsS3Bucket: crypto-trading-flowlogs
      flowLogsS3Prefix: global-accelerator
    listeners:
    - protocol: TCP
      portRanges:
      - fromPort: 443
        toPort: 443
      - fromPort: 8443
        toPort: 8443
    endpointGroups:
    - listenerArn: listener-arn
      endpointGroupRegion: us-east-1
      trafficDialPercentage: 100
      healthCheckProtocol: TCP
      healthCheckPort: 443
      healthCheckIntervalSeconds: 10
      thresholdCount: 3
      endpointConfigurations:
      - endpointId: alb-arn
        weight: 100
        clientIPPreservationEnabled: true

---
# CDN Configuration for Static Assets
apiVersion: cloudfront.aws.crossplane.io/v1alpha1
kind: Distribution
metadata:
  name: crypto-trading-cdn
  namespace: crypto-trading
spec:
  forProvider:
    region: us-east-1
    distributionConfig:
      enabled: true
      comment: Crypto Trading Platform CDN
      priceClass: PriceClass_All
      httpVersion: http2and3
      isIPV6Enabled: true
      
      origins:
      - domainName: api.crypto-trading.com
        id: trading-api
        customOriginConfig:
          httpPort: 80
          httpsPort: 443
          originProtocolPolicy: https-only
          originSslProtocols:
          - TLSv1.2
          - TLSv1.3
        customHeaders:
        - headerName: X-Origin-Verify
          headerValue: secret-value
      
      defaultCacheBehavior:
        targetOriginId: trading-api
        viewerProtocolPolicy: redirect-to-https
        allowedMethods:
        - GET
        - HEAD
        - OPTIONS
        - PUT
        - POST
        - PATCH
        - DELETE
        cachedMethods:
        - GET
        - HEAD
        compress: true
        
        forwardedValues:
          queryString: true
          cookies:
            forward: all
          headers:
          - Authorization
          - Content-Type
          - X-Requested-With
        
        minTTL: 0
        defaultTTL: 0
        maxTTL: 31536000
      
      viewerCertificate:
        acmCertificateArn: arn:aws:acm:us-east-1:123456789012:certificate/cdn-cert
        sslSupportMethod: sni-only
        minimumProtocolVersion: TLSv1.2_2021
      
      restrictions:
        geoRestriction:
          restrictionType: blacklist
          locations:
          - KP
          - IR
          - CU
          - SY
      
      webACLId: arn:aws:wafv2:us-east-1:123456789012:global/webacl/crypto-trading-cdn-waf

---
# Gateway API (Future Migration Path)
apiVersion: gateway.networking.k8s.io/v1beta1
kind: Gateway
metadata:
  name: crypto-trading-gateway
  namespace: crypto-trading
spec:
  gatewayClassName: aws-alb
  listeners:
  - name: https
    protocol: HTTPS
    port: 443
    tls:
      mode: Terminate
      certificateRefs:
      - name: crypto-trading-tls
    allowedRoutes:
      namespaces:
        from: Same
  - name: websocket
    protocol: TCP
    port: 8443
    allowedRoutes:
      namespaces:
        from: Same

---
# HTTPRoute for Gateway API
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: crypto-trading-routes
  namespace: crypto-trading
spec:
  parentRefs:
  - name: crypto-trading-gateway
  hostnames:
  - api.crypto-trading.com
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: crypto-trading-bot
      port: 80
      weight: 100
  - matches:
    - path:
        type: PathPrefix
        value: /ws
    backendRefs:
    - name: crypto-trading-websocket
      port: 8081
      weight: 100