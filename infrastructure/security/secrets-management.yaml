# Secrets Management Configuration for Crypto Trading Platform
# This file defines the secrets architecture using AWS Secrets Manager,
# Kubernetes Secrets, and HashiCorp Vault integration

---
# AWS Secrets Manager - External Secrets Operator Configuration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: crypto-trading
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: crypto-trading-bot

---
# Kraken API Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kraken-api-credentials
  namespace: crypto-trading
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: kraken-api-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        api-key: "{{ .apiKey | b64enc }}"
        api-secret: "{{ .apiSecret | b64enc }}"
  data:
  - secretKey: apiKey
    remoteRef:
      key: crypto-trading/kraken/api-credentials
      property: api_key
  - secretKey: apiSecret
    remoteRef:
      key: crypto-trading/kraken/api-credentials
      property: api_secret

---
# Database Credentials with Rotation
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: crypto-trading
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        username: "{{ .username | b64enc }}"
        password: "{{ .password | b64enc }}"
        connection-string: "{{ printf \"postgresql://%s:%s@%s:%s/%s?sslmode=require\" .username .password .host .port .database | b64enc }}"
  data:
  - secretKey: username
    remoteRef:
      key: crypto-trading/aurora/master-credentials
      property: username
  - secretKey: password
    remoteRef:
      key: crypto-trading/aurora/master-credentials
      property: password
  - secretKey: host
    remoteRef:
      key: crypto-trading/aurora/master-credentials
      property: host
  - secretKey: port
    remoteRef:
      key: crypto-trading/aurora/master-credentials
      property: port
  - secretKey: database
    remoteRef:
      key: crypto-trading/aurora/master-credentials
      property: dbname

---
# Redis Authentication
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: crypto-trading
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        auth-token: "{{ .authToken | b64enc }}"
        connection-string: "{{ printf \"rediss://:%s@%s:%s\" .authToken .endpoint .port | b64enc }}"
  data:
  - secretKey: authToken
    remoteRef:
      key: crypto-trading/redis/auth-token
      property: auth_token
  - secretKey: endpoint
    remoteRef:
      key: crypto-trading/redis/auth-token
      property: endpoint
  - secretKey: port
    remoteRef:
      key: crypto-trading/redis/auth-token
      property: port

---
# JWT Signing Keys with Rotation
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: jwt-credentials
  namespace: crypto-trading
spec:
  refreshInterval: 30m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: jwt-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        secret: "{{ .current | b64enc }}"
        secret-previous: "{{ .previous | b64enc }}"
  data:
  - secretKey: current
    remoteRef:
      key: crypto-trading/jwt/signing-keys
      property: current_key
  - secretKey: previous
    remoteRef:
      key: crypto-trading/jwt/signing-keys
      property: previous_key

---
# TLS Certificates
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: crypto-trading-tls
  namespace: crypto-trading
spec:
  secretName: crypto-trading-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - api.crypto-trading.com
  - api-dr.crypto-trading.com
  - "*.crypto-trading.com"
  duration: 2160h # 90 days
  renewBefore: 720h # 30 days
  subject:
    organizations:
    - Crypto Trading Platform
  privateKey:
    algorithm: ECDSA
    size: 256

---
# Certificate Issuer
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: security@crypto-trading.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - dns01:
        route53:
          region: us-east-1
          accessKeyID: AKIAIOSFODNN7EXAMPLE
          secretAccessKeySecretRef:
            name: route53-credentials
            key: secret-access-key

---
# Service Account for IRSA
apiVersion: v1
kind: ServiceAccount
metadata:
  name: crypto-trading-bot
  namespace: crypto-trading
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/crypto-trading-bot-role

---
# Network Policy for Secrets Access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secrets-access-policy
  namespace: crypto-trading
spec:
  podSelector:
    matchLabels:
      app: crypto-trading-bot
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: external-secrets
    ports:
    - protocol: TCP
      port: 443
  - to:
    - podSelector:
        matchLabels:
          app: cert-manager
    ports:
    - protocol: TCP
      port: 443

---
# Sealed Secrets for Kubernetes-native Secrets
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: config-secrets
  namespace: crypto-trading
spec:
  encryptedData:
    max_position_size: AgBvKqO6W7LL+SomeEncryptedData==
    risk_parameters: AgCHpKxO6W8MM+MoreEncryptedData==
    compliance_settings: AgDJqLyO7W9NN+AdditionalEncryptedData==

---
# HashiCorp Vault Integration (Optional)
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: crypto-trading-auth
  namespace: crypto-trading
spec:
  method: kubernetes
  mount: kubernetes
  kubernetes:
    role: crypto-trading
    serviceAccount: crypto-trading-bot
    audiences:
    - vault

---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: vault-kraken-credentials
  namespace: crypto-trading
spec:
  type: kv-v2
  mount: secret
  path: crypto-trading/kraken
  destination:
    name: vault-kraken-credentials
    create: true
  refreshAfter: 30s
  vaultAuthRef: crypto-trading-auth

---
# Secrets Rotation CronJobs
apiVersion: batch/v1
kind: CronJob
metadata:
  name: rotate-api-keys
  namespace: crypto-trading
spec:
  schedule: "0 2 * * 0" # Weekly at 2 AM on Sundays
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secrets-rotation
          containers:
          - name: rotate-keys
            image: crypto-trading-secrets-rotator:latest
            command:
            - /bin/sh
            - -c
            - |
              python rotate_api_keys.py \
                --service kraken \
                --secret-name crypto-trading/kraken/api-credentials \
                --notify-slack
          restartPolicy: OnFailure

---
# RBAC for Secrets Access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secrets-reader
  namespace: crypto-trading
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: 
  - kraken-api-credentials
  - database-credentials
  - redis-credentials
  - jwt-credentials
  - crypto-trading-tls
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: crypto-trading-secrets-reader
  namespace: crypto-trading
subjects:
- kind: ServiceAccount
  name: crypto-trading-bot
  namespace: crypto-trading
roleRef:
  kind: Role
  name: secrets-reader
  apiGroup: rbac.authorization.k8s.io